/**
 * Spring Boot 2.0.x Project Build
 */

// Apply the build scan and Spring Boot 2.0.x plugin

// tag::plugins[]
plugins {
    id "java"
    id 'org.springframework.boot' version '2.0.5.RELEASE'
    id 'org.jetbrains.kotlin.jvm' version '1.3.0'
    id "org.jetbrains.kotlin.plugin.spring" version "1.3.0"
    id "org.jetbrains.kotlin.plugin.jpa" version "1.3.0"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.0"
    id "com.moowork.node" version "1.2.0"
}
// end::plugins[]

// Add the repository for dependency resolution
repositories {
    jcenter()
}

// Add Spring Boot BOM and dependencies for the Spring Boot Starter Web/Test

// tag::dependencies[]
dependencies {
    implementation 'org.springframework.boot:spring-boot-dependencies:2.0.5.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.0.5.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.0.5.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-security:2.0.5.RELEASE'
    implementation 'org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.0.5.RELEASE'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.0.5.RELEASE'

    components {
        withModule('org.springframework:spring-beans') {
            allVariants {
                withDependencyConstraints {
                    // Need to patch constraints because snakeyaml is an optional dependency
                    it.findAll { it.name == 'snakeyaml' }.each { it.version { strictly '1.19' } }
                }
            }
        }
    }
    compile "javax.xml.bind:jaxb-api:2.2.11"
    compile "com.sun.xml.bind:jaxb-core:2.2.11"
    compile "com.sun.xml.bind:jaxb-impl:2.2.11"
    compile "javax.activation:javax.activation-api:1.2.0"
    compile "com.fasterxml.jackson.core:jackson-core:2.9.6"
    compile "com.fasterxml.jackson.core:jackson-annotations:2.9.6"
    compile "com.fasterxml.jackson.core:jackson-databind:2.9.6"
    compile "com.github.fge:json-patch:1.9"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.6"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile "org.jetbrains.kotlin:kotlin-reflect"
    compile "org.jetbrains.kotlin:kotlin-noarg"
    compile "org.hibernate:hibernate-envers:5.3.7.Final"
    compile "org.apache.commons:commons-csv:1.5"
    compile "mysql:mysql-connector-java:8.0.12"
}
// end: dependencies[]

allOpen {
    annotation("javax.persistence.Entity")
    annotation("javax.persistence.MappedSuperclass")
    annotation("javax.persistence.Embeddable")
}

bootJar {
    mainClassName = 'cz.astro.var.data.App'
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

node {
    version = '8.11.2'
    npmVersion = '5.6.0'
    download = true

    // Set the work directory for NPM
    npmWorkDir = file("${project.buildDir}/npm")

    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}/my-app")
}

task npmBuild(type: NpmTask) {
    args = ["run", "build"]
}

task moveNpmBuildToResources(type: Copy) {
    from "${project.projectDir}/my-app/build"
    into "${project.projectDir}/src/main/resources/static"
}

task stage(dependsOn: ['npmInstall','moveNpmBuildToResources','npmBuild','build', 'clean'])
npmInstall.mustRunAfter clean
npmBuild.mustRunAfter npmInstall
moveNpmBuildToResources.mustRunAfter npmBuild
build.mustRunAfter moveNpmBuildToResources

